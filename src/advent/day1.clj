(ns advent.day1
  (:require [clojure.string :as str]))

(def captcha-input

(def captcha-cleaned-up
  (into [] (map #(Integer/parseInt %) (str/split captcha-input #""))))


(defn puzzle1 [input]
  (let [fudged-input (conj input (first input))]
    (loop [sum 0
           prev 0
           idx 0]
      (if (= idx (count fudged-input))
        sum
        (let [current (get fudged-input idx)]
          (if (= current prev)
            (recur (+ sum current) current (inc idx))
            (recur sum current (inc idx))))))))

(puzzle1 [1 1 2 2])
(puzzle1 [1 1 1 1])
(puzzle1 [1 2 3 4])
(puzzle1 [9 1 2 1 2 1 2 9])
(puzzle1 captcha-cleaned-up)

(defn puzzle2-compare [coll idx offset]
  (let [idx2 (+ idx offset)
        idx2 (if (>= idx2 (count coll))
                      (- idx2 (count coll))
                      idx2)
        value1 (nth coll idx)
        value2 (nth coll idx2)]
    (= value1 value2)))

(defn puzzle2 [input]
  (let [offset (/ (count input) 2)]
    (reduce (fn [sum idx]
              (if (puzzle2-compare input idx offset)
                (+ sum (nth input idx))
                sum))
            0
            (range (count input)))))

(puzzle2-compare [1 2 1 2] 3 2)

(puzzle2 [1 2 1 2])
(puzzle2 [1 2 2 1])
(puzzle2 [1 2 3 4 2 5])
(puzzle2 [1 2 3 1 2 3])
(puzzle2 [1 2 1 3 1 4 1 5])
(puzzle2 captcha-cleaned-up)
